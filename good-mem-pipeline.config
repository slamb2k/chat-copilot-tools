{
  "SemanticMemory": {
    // "AzureBlobs" or "FileSystemContentStorage"
    "ContentStorageType": "FileSystemContentStorage",
    // Data ingestion pipelines configuration.
    "DataIngestion": {
      "DistributedOrchestration": {
        // "AzureQueue", "RabbitMQ", "FileBasedQueue"
        "QueueType": "FileBasedQueue"
      },
      // Multiple generators can be used, e.g. for data migration, A/B testing, etc.
      "EmbeddingGeneratorTypes": [
        "AzureOpenAIEmbedding"
      ],
      // Vectors can be written to multiple storages, e.g. for data migration, A/B testing, etc.
      "VectorDbTypes": [
        "AzureCognitiveSearch"
      ]
    },
    "Services": {
      "AzureBlobs": {
        // "ConnectionString" or "AzureIdentity"
        // AzureIdentity: use automatic AAD authentication mechanism. You can test locally
        //   using the env vars AZURE_TENANT_ID, AZURE_CLIENT_ID, AZURE_CLIENT_SECRET.
        "Auth": "AzureIdentity",
        // Azure Storage account name, required when using AzureIdentity auth
        // Note: you can use an env var 'SemanticMemory__Services__AzureBlobs__Account' to set this
        "Account": "",
        // Container where to create directories and upload files
        "Container": "smemory",
        // Required when Auth == ConnectionString
        // Note: you can use an env var 'SemanticMemory__Services__AzureBlobs__ConnectionString' to set this
        "ConnectionString": "",
        // Setting used only for country clouds
        "EndpointSuffix": "core.windows.net"
      },
      "AzureQueue": {
        // - AzureIdentity: use automatic AAD authentication mechanism
        // - ConnectionString: auth using a connection string
        "Auth": "AzureIdentity",
        // Azure Storage account name, required when using AzureIdentity auth
        // Note: you can use an env var 'SemanticMemory__Orchestration__DistributedPipeline__AzureQueue__Account' to set this
        "Account": "",
        // Required when Auth == ConnectionString
        // Note: you can use an env var 'SemanticMemory__Orchestration__DistributedPipeline__AzureQueue__ConnectionString' to set this
        "ConnectionString": "",
        // Setting used only for country clouds
        "EndpointSuffix": "core.windows.net"
      },
      "AzureCognitiveSearch": {
        // "ApiKey" or "AzureIdentity"
        // AzureIdentity: use automatic AAD authentication mechanism. You can test locally
        //   using the env vars AZURE_TENANT_ID, AZURE_CLIENT_ID, AZURE_CLIENT_SECRET.
        "Auth": "ApiKey",
        "Endpoint": "https://<...>",
        "APIKey": "",
        "VectorIndexPrefix": "smemory-",
      },
      "AzureOpenAIEmbedding": {
        // "ApiKey" or "AzureIdentity"
        // AzureIdentity: use automatic AAD authentication mechanism. You can test locally
        //   using the env vars AZURE_TENANT_ID, AZURE_CLIENT_ID, AZURE_CLIENT_SECRET.
        "Auth": "ApiKey",
        "Endpoint": "https://<...>.openai.azure.com/",
        "Deployment": "",
        "APIKey": "",
      },
      "FileSystemContentStorage": {
        "Directory": "/tmp/semanticmemory/content"
      },
      "Qdrant": {
        "Endpoint": "https://<...>",
        "APIKey": "",
        "VectorIndexPrefix": "smemory-"
      },
      "OpenAI": {
        "EmbeddingModel": "text-embedding-ada-002",
        "APIKey": "",
        "OrgId": "",
      },
      "RabbitMq": {
        "Host": "127.0.0.1",
        "Port": "5672",
        "Username": "user",
        "Password": ""
      },
      "FileBasedQueue": {
        "Path": "/tmp/semanticmemory/queues",
        "CreateIfNotExist": true
      },
    },
  },
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*"
}